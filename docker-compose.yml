version: '3.9'

x-common-logging: &common-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

x-default-restart: &default-restart
  restart: always

x-shared-env: &shared-env
  ENVIRONMENT: production
  APP_SECRET_KEY: "super_secure_key"
  LOG_LEVEL: info
  DATABASE_URL: postgres://user:password@db:5432/app_db
  REDIS_URL: redis://:redis_password@redis:6379

services:
  reverse-proxy:
    image: traefik:v2.9
    container_name: traefik_proxy
    ports:
      - "80:80"
      - "443:443"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=admin@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/acme.json"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/acme.json:/acme.json
    networks:
      - frontend_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.role == manager"

  web:
    image: nginx:alpine
    container_name: web_service
    depends_on:
      - app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`example.com`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
    volumes:
      - ./html:/usr/share/nginx/html
    networks:
      - frontend_network
      - app_network
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      placement:
        constraints:
          - "node.role == worker"
    <<: *default-restart
    <<: *common-logging

  app:
    build:
      context: ./app
    container_name: app_service
    ports:
      - "8000:8000"
    environment:
      <<: *shared-env
    secrets:
      - app_secret
    networks:
      - app_network
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: "1.00"
          memory: "1G"
        reservations:
          memory: "512M"
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 2
        delay: 15s
      placement:
        constraints:
          - "node.role == worker"
    <<: *common-logging

  redis:
    image: redis:alpine
    container_name: redis_service
    command: redis-server --requirepass redis_password
    ports:
      - "6379:6379"
    networks:
      - app_network
    deploy:
      replicas: 2
    <<: *default-restart

  db:
    image: postgres:15-alpine
    container_name: db_service
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app_db
    ports:
      - "5432:5432"
    secrets:
      - db_password
    networks:
      - app_network
    volumes:
      - db_data:/var/lib/postgresql/data
    <<: *common-logging

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: elasticsearch_service
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
    ports:
      - "9200:9200"
    networks:
      - app_network
    deploy:
      replicas: 2
    <<: *default-restart

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.0
    container_name: logstash_service
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - app_network
    deploy:
      replicas: 2
    <<: *default-restart

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: kibana_service
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app_network
    deploy:
      replicas: 1
    <<: *default-restart

  worker:
    build:
      context: ./worker
    container_name: worker_service
    environment:
      <<: *shared-env
    networks:
      - app_network
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          memory: "256M"
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 2
        delay: 5s
    <<: *common-logging

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_service
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - app_network
    deploy:
      replicas: 2
    <<: *default-restart

networks:
  frontend_network:
  app_network:

volumes:
  db_data:

secrets:
  app_secret:
    file: ./secrets/app_secret.txt
  db_password:
    file: ./secrets/db_password.txt
